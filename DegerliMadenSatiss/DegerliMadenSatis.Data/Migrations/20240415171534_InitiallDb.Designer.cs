// <auto-generated />
using System;
using DegerliMadenSatis.Data.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DegerliMadenSatis.Data.Migrations
{
    [DbContext(typeof(DegerliMadenSatisDbContext))]
    [Migration("20240415171534_InitiallDb")]
    partial class InitiallDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1539),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1562),
                            Name = "Fiziki Altın",
                            Url = "fiziki-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1568),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1569),
                            Name = "Dijital Altın",
                            Url = "dijital-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1572),
                            Description = "Ziynet Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1574),
                            Name = "Ziynet Altın",
                            Url = "ziynet-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1577),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1578),
                            Name = "Fiziki Gümüş",
                            Url = "fiziki-gümüs"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1581),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 245, DateTimeKind.Local).AddTicks(1582),
                            Name = "Dijital Gümüş",
                            Url = "dijital-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(306),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(330),
                            Name = "5 Gr Külçe Altın",
                            Price = 14000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 5 Gr Külçe Altın.",
                            Url = "5-gr-külce-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(346),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(347),
                            Name = "10 Gr Külçe Altın",
                            Price = 28000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 10 Gr Külçe Altın.",
                            Url = "10-gr-külce-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(352),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(354),
                            Name = "20 Gr Külçe Altın",
                            Price = 56000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 20 Gr Külçe Altın.",
                            Url = "20-gr-külce-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(358),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(360),
                            Name = "50 Gr Külçe Altın",
                            Price = 140000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 50 Gr Külçe Altın.",
                            Url = "50-gr-külce-altin"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(364),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(366),
                            Name = "100 Gr Külçe Altın",
                            Price = 280000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 100 Gr Külçe Altın.",
                            Url = "100-gr-külce-altin"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(369),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(370),
                            Name = "250 Gr Külçe Altın",
                            Price = 7000000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 250 Gr Külçe Altın.",
                            Url = "250-gr-külce-altin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(374),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(375),
                            Name = "500 Gr Külçe Altın",
                            Price = 1400000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "500-gr-külce-altin"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(379),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(394),
                            Name = "1000 Gr Külçe Altın",
                            Price = 2800000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "1000-gr-külce-altin"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(423),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(425),
                            Name = "Çeyrek Altın",
                            Price = 4750m,
                            Properties = "22 Ayar 916.0 Saflıkta, 1.75 Gr Çeyrek Altın.",
                            Url = "ceyrek-altin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(429),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(430),
                            Name = "Yarım",
                            Price = 9500m,
                            Properties = "22 Ayar 916.0 Saflıkta, 3.50 Gr Yarım Altın.",
                            Url = "yarim-altin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(434),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(435),
                            Name = "Tam Altın",
                            Price = 19000m,
                            Properties = "22 Ayar 916.0 Saflıkta, 7 Gr Tam Altın.",
                            Url = "tam-altin"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(439),
                            ImageUrl = "12.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(441),
                            Name = "100gr Külçe Gümüş",
                            Price = 3850m,
                            Properties = "999.0 Saflıkta, 100 Gr Külçe Gümüş.",
                            Url = "100gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(445),
                            ImageUrl = "13.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(446),
                            Name = "250gr Külçe Gümüş",
                            Price = 8750m,
                            Properties = "999.0 Saflıkta, 250 Gr Külçe Gümüş.",
                            Url = "250gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(450),
                            ImageUrl = "14.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(451),
                            Name = "500gr Külçe Gümüş",
                            Price = 17500m,
                            Properties = "999.0 Saflıkta, 500 Gr Külçe Gümüş.",
                            Url = "500gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(455),
                            ImageUrl = "15.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 20, 15, 34, 248, DateTimeKind.Local).AddTicks(456),
                            Name = "1000gr Külçe Gümüş",
                            Price = 34000m,
                            Properties = "999.0 Saflıkta, 1000 Gr Külçe Gümüş.",
                            Url = "1000gr-külce-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 243, DateTimeKind.Local).AddTicks(5870),
                            UserId = "cabef934-bcca-4ef9-b3e5-241753e45fe5"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 243, DateTimeKind.Local).AddTicks(5915),
                            UserId = "797cafb9-b3d4-472d-b525-f6905a3bd865"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 243, DateTimeKind.Local).AddTicks(5920),
                            UserId = "ab11da77-6433-4d37-bb39-6f24f7bc4029"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 20, 15, 34, 243, DateTimeKind.Local).AddTicks(5924),
                            UserId = "627ebc04-3cbd-400f-90d7-52835474f2ea"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1ac549b0-b552-4a08-8c56-956f700b6b17",
                            Description = "Süper yönetiki haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "cdd94ac9-223e-40a2-99c2-645a7717aa5d",
                            Description = "Yönetiki haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f27981d2-3b0b-4812-95da-cd7d66a50218",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cabef934-bcca-4ef9-b3e5-241753e45fe5",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "1fae714e-723a-4d7b-9a50-d43085220875",
                            DateOfBirth = new DateTime(1945, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mslmhanerol@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Müslüm Han",
                            Gender = "Erkek",
                            LastName = "Erol",
                            LockoutEnabled = false,
                            NormalizedEmail = "MSLMHANEROL@GMAIL.COM",
                            NormalizedUserName = "MUSLUMHANEROL",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4tJwPBReDXqFBRmmASymwEgLso+VZiNUF7VluEyZLo2XJBfV1CEwEeZq9ycr/XVw==",
                            PhoneNumber = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3ef19bc-b10c-42f5-8ad3-f61729ea5b5f",
                            TwoFactorEnabled = false,
                            UserName = "muslumhanerol"
                        },
                        new
                        {
                            Id = "797cafb9-b3d4-472d-b525-f6905a3bd865",
                            AccessFailedCount = 0,
                            Address = "Beşiktaş Caddesi Yıldız Sokak No:34 D:34 Türkiye",
                            City = "İstanbul",
                            ConcurrencyStamp = "df397554-b3d6-4003-b456-e98d4641ff90",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "enginniyazi@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin",
                            Gender = "Erkek",
                            LastName = "Niyazi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINNIYAZI@GMAIL.COM",
                            NormalizedUserName = "ENGINNIYAZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlSSh4JRpeV5S2O7r/uzjSp136Gd5gswExrQlevE5r1RS6DbdocZurc5xM9Ka9Odw==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69b8986d-d392-4340-86ec-319b09a50ab5",
                            TwoFactorEnabled = false,
                            UserName = "enginniyazi"
                        },
                        new
                        {
                            Id = "ab11da77-6433-4d37-bb39-6f24f7bc4029",
                            AccessFailedCount = 0,
                            Address = "Beyoğlu Caddesi Fatih Sokak No:34 D:34 Türkiye",
                            City = "İstanbul",
                            ConcurrencyStamp = "0a89d7b6-5abd-419f-abf1-ecf39e91646e",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatihsultan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatih",
                            Gender = "Erkek",
                            LastName = "Sultan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATIHSULTAN@GMAIL.COM",
                            NormalizedUserName = "FATIHSULTAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMrvsZ2JLQXj4O4iiI3xbD29QkTP1801+yYRlWZPnPLbFe18CLBOzpu5KvtRkAs4Mw==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f13f43c0-fbc3-4776-983b-1f50cfb453ed",
                            TwoFactorEnabled = false,
                            UserName = "fatihsultan"
                        },
                        new
                        {
                            Id = "627ebc04-3cbd-400f-90d7-52835474f2ea",
                            AccessFailedCount = 0,
                            Address = "Avrupa Caddesi Saray Sokak No:34 D:34 Türkiye",
                            City = "Ukrayna",
                            ConcurrencyStamp = "ea6eaa4b-aea5-46b5-9808-2e302ac03803",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hurremsultan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hürrem",
                            Gender = "Kadın",
                            LastName = "Sultan",
                            LockoutEnabled = false,
                            NormalizedEmail = "HURREMSULTAN@GMAIL.COM",
                            NormalizedUserName = "HURREMSULTAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEERs+zjlJtznJRRDtd+kDolxcCHbvyewUP95f8CSJcFP0+4bucVopRngWLhpJjo5sQ==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd6d7dd1-c93f-4f37-b91a-0db4e3ec5355",
                            TwoFactorEnabled = false,
                            UserName = "hurremsultan"
                        },
                        new
                        {
                            Id = "0c961e13-38dd-464c-b422-68c1f2c7506b",
                            AccessFailedCount = 0,
                            Address = "Matrix Caddesi Makine Sokak No:34 D:34 Türkiye",
                            City = "Zion",
                            ConcurrencyStamp = "15e90d12-0d82-40a1-aea5-5976c3bd9f5d",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trinityneo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trinity",
                            Gender = "Kadın",
                            LastName = "Neo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRINITYNEO@GMAIL.COM",
                            NormalizedUserName = "TIRINITYNEO",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+hWvNNyd3KMG/nL1TLA1GvKN21SO8oqYy1M1UnaDvxNSSKbtH7nCwPJCr60XXxug==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2af999dd-5688-4be0-be2e-c96e4423bc38",
                            TwoFactorEnabled = false,
                            UserName = "trinityneo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cabef934-bcca-4ef9-b3e5-241753e45fe5",
                            RoleId = "1ac549b0-b552-4a08-8c56-956f700b6b17"
                        },
                        new
                        {
                            UserId = "797cafb9-b3d4-472d-b525-f6905a3bd865",
                            RoleId = "cdd94ac9-223e-40a2-99c2-645a7717aa5d"
                        },
                        new
                        {
                            UserId = "ab11da77-6433-4d37-bb39-6f24f7bc4029",
                            RoleId = "cdd94ac9-223e-40a2-99c2-645a7717aa5d"
                        },
                        new
                        {
                            UserId = "627ebc04-3cbd-400f-90d7-52835474f2ea",
                            RoleId = "f27981d2-3b0b-4812-95da-cd7d66a50218"
                        },
                        new
                        {
                            UserId = "0c961e13-38dd-464c-b422-68c1f2c7506b",
                            RoleId = "cdd94ac9-223e-40a2-99c2-645a7717aa5d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderDetail", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
