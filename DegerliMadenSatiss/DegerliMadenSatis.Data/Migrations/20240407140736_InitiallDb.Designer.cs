// <auto-generated />
using System;
using DegerliMadenSatis.Data.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DegerliMadenSatis.Data.Migrations
{
    [DbContext(typeof(DegerliMadenSatisDbContext))]
    [Migration("20240407140736_InitiallDb")]
    partial class InitiallDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6850),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6871),
                            Name = "Fiziki Altın",
                            Url = "fiziki-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6878),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6879),
                            Name = "Dijital Altın",
                            Url = "dijital-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6882),
                            Description = "Ziynet Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6883),
                            Name = "Ziynet Altın",
                            Url = "ziynet-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6886),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6887),
                            Name = "Fiziki Gümüş",
                            Url = "fiziki-gümüs"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6890),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 22, DateTimeKind.Local).AddTicks(6891),
                            Name = "Dijital Gümüş",
                            Url = "dijital-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1240),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1265),
                            Name = "5 Gr Külçe Altın",
                            Price = 13500m,
                            Properties = "24 Ayar 995.0 Saflıkta, 5 Gr Külçe Altın.",
                            Url = "5-gr-külce-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1281),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1282),
                            Name = "10 Gr Külçe Altın",
                            Price = 27000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 10 Gr Külçe Altın.",
                            Url = "10-gr-külce-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1287),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1288),
                            Name = "20 Gr Külçe Altın",
                            Price = 54000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 20 Gr Külçe Altın.",
                            Url = "20-gr-külce-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1292),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1294),
                            Name = "50 Gr Külçe Altın",
                            Price = 135000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 50 Gr Külçe Altın.",
                            Url = "50-gr-külce-altin"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1299),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1300),
                            Name = "100 Gr Külçe Altın",
                            Price = 270000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 100 Gr Külçe Altın.",
                            Url = "100-gr-külce-altin"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1304),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1305),
                            Name = "250 Gr Külçe Altın",
                            Price = 680000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 250 Gr Külçe Altın.",
                            Url = "250-gr-külce-altin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1310),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1311),
                            Name = "500 Gr Külçe Altın",
                            Price = 1350000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "500-gr-külce-altin"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1315),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1338),
                            Name = "1000 Gr Külçe Altın",
                            Price = 270000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "1000-gr-külce-altin"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1372),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1375),
                            Name = "Çeyrek Altın",
                            Price = 4700m,
                            Properties = "22 Ayar 916.0 Saflıkta, 1.75 Gr Çeyrek Altın.",
                            Url = "ceyrek-altin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1379),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1380),
                            Name = "Yarım",
                            Price = 1250m,
                            Properties = "22 Ayar 916.0 Saflıkta, 3.50 Gr Yarım Altın.",
                            Url = "yarim-altin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1384),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1386),
                            Name = "Tam Altın",
                            Price = 2100m,
                            Properties = "22 Ayar 916.0 Saflıkta, 7 Gr Tam Altın.",
                            Url = "tam-altin"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1390),
                            ImageUrl = "12.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1393),
                            Name = "100gr Külçe Gümüş",
                            Price = 3500m,
                            Properties = "999.0 Saflıkta, 100 Gr Külçe Gümüş.",
                            Url = "100gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1399),
                            ImageUrl = "13.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1400),
                            Name = "250gr Külçe Gümüş",
                            Price = 8000m,
                            Properties = "999.0 Saflıkta, 250 Gr Külçe Gümüş.",
                            Url = "250gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1404),
                            ImageUrl = "14.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1405),
                            Name = "500gr Külçe Gümüş",
                            Price = 16000m,
                            Properties = "999.0 Saflıkta, 500 Gr Külçe Gümüş.",
                            Url = "500gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1410),
                            ImageUrl = "15.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 7, 17, 7, 36, 26, DateTimeKind.Local).AddTicks(1411),
                            Name = "1000gr Külçe Gümüş",
                            Price = 32000m,
                            Properties = "999.0 Saflıkta, 1000 Gr Külçe Gümüş.",
                            Url = "1000gr-külce-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 20, DateTimeKind.Local).AddTicks(5516),
                            UserId = "9aecffd8-a93e-4c40-9a5f-d76bd3987a29"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 20, DateTimeKind.Local).AddTicks(5551),
                            UserId = "f968a9aa-d010-467a-a096-5f5ccc6f335c"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 20, DateTimeKind.Local).AddTicks(5554),
                            UserId = "29eee199-1608-4618-a182-886a17a826f2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 17, 7, 36, 20, DateTimeKind.Local).AddTicks(5557),
                            UserId = "e197c489-9720-4b66-845d-8b3e6fac3945"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "906ecd91-be44-4027-8ac0-c8ef1d1925e0",
                            Description = "Süper yönetiki haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "6c539cef-1b42-4a39-9324-601ec734a71a",
                            Description = "Yönetiki haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "638ec27a-6707-4b63-8cb8-7f11b259b6fd",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9aecffd8-a93e-4c40-9a5f-d76bd3987a29",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "faa1680b-e849-416b-8c2b-e90bad872cc9",
                            DateOfBirth = new DateTime(1945, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mslmhanerol@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Müslüm Han",
                            Gender = "Erkek",
                            LastName = "Erol",
                            LockoutEnabled = false,
                            NormalizedEmail = "MSLMHANEROL@GMAIL.COM",
                            NormalizedUserName = "MUSLUMHANEROL",
                            PasswordHash = "AQAAAAIAAYagAAAAEB9DMssAJVIf+f0eaL/cNPcZorF9JJDlSzABcOV2U6F+OR9k2QdNJf5lR43dU5Jl7A==",
                            PhoneNumber = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca80b44-3b42-4cba-b6fd-d0e1ff76a1a7",
                            TwoFactorEnabled = false,
                            UserName = "muslumhanerol"
                        },
                        new
                        {
                            Id = "f968a9aa-d010-467a-a096-5f5ccc6f335c",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "8a70818b-a6a5-415d-9b86-0cc2f0a51283",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "enginniyazi@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin",
                            Gender = "Erkek",
                            LastName = "Niyazi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINNIYAZI@GMAIL.COM",
                            NormalizedUserName = "ENGINNIYAZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEOrE7UpX4WZeUKR8E2OPxFkiLEDdW+cjsD5s24FBsPAfK1PKteHGfmrAOCJ6RTyrhw==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab71bf80-4fb0-415e-aeea-8b19327088c2",
                            TwoFactorEnabled = false,
                            UserName = "enginniyazi"
                        },
                        new
                        {
                            Id = "29eee199-1608-4618-a182-886a17a826f2",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "6ae3cf8e-3081-48d5-96d2-3b77bceea1e5",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemaldurukan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            LastName = "Durukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALDURUKAN@GMAIL.COM",
                            NormalizedUserName = "KEMALDURUKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFxLN8i/D15Fvs4ydblu+n1AHoMEp0wQ79WeByuP6xUae8FgYCfhxz3c7NXw2DENyw==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "320c317f-347f-4cfc-a098-feb61d0d9d8c",
                            TwoFactorEnabled = false,
                            UserName = "kemaldurukan"
                        },
                        new
                        {
                            Id = "e197c489-9720-4b66-845d-8b3e6fac3945",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "cb4004c6-ff41-4fba-a1fb-161fe1d1eff2",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aysenumay@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşen Umay",
                            Gender = "Kadın",
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSENUMAY@GMAIL.COM",
                            NormalizedUserName = "AYSENUMAY",
                            PasswordHash = "AQAAAAIAAYagAAAAELxRbkG/Gw7eFZgvl9VdXrcM8PyoQ3NPLETmTLVKVvmvf7/zRAHaRXDx2CIfeKWQUg==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18a99bb6-f376-4e5a-9eda-de698b754f85",
                            TwoFactorEnabled = false,
                            UserName = "aysenumay"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9aecffd8-a93e-4c40-9a5f-d76bd3987a29",
                            RoleId = "906ecd91-be44-4027-8ac0-c8ef1d1925e0"
                        },
                        new
                        {
                            UserId = "f968a9aa-d010-467a-a096-5f5ccc6f335c",
                            RoleId = "6c539cef-1b42-4a39-9324-601ec734a71a"
                        },
                        new
                        {
                            UserId = "29eee199-1608-4618-a182-886a17a826f2",
                            RoleId = "6c539cef-1b42-4a39-9324-601ec734a71a"
                        },
                        new
                        {
                            UserId = "e197c489-9720-4b66-845d-8b3e6fac3945",
                            RoleId = "638ec27a-6707-4b63-8cb8-7f11b259b6fd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItem");
                });
#pragma warning restore 612, 618
        }
    }
}
