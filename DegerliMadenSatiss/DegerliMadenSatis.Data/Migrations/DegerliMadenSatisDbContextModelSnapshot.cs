// <auto-generated />
using System;
using DegerliMadenSatis.Data.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DegerliMadenSatis.Data.Migrations
{
    [DbContext(typeof(DegerliMadenSatisDbContext))]
    partial class DegerliMadenSatisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7794),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7813),
                            Name = "Fiziki Altın",
                            Url = "fiziki-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7823),
                            Description = "Altın Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7824),
                            Name = "Dijital Altın",
                            Url = "dijital-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7827),
                            Description = "Ziynet Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7827),
                            Name = "Ziynet Altın",
                            Url = "ziynet-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7830),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7831),
                            Name = "Fiziki Gümüş",
                            Url = "fiziki-gümüs"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7833),
                            Description = "Gümüş Kategorisi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 324, DateTimeKind.Local).AddTicks(7834),
                            Name = "Dijital Gümüş",
                            Url = "dijital-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4036),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4056),
                            Name = "5 Gr Külçe Altın",
                            Price = 14000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 5 Gr Külçe Altın.",
                            Url = "5-gr-külce-altin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4067),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4068),
                            Name = "10 Gr Külçe Altın",
                            Price = 28000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 10 Gr Külçe Altın.",
                            Url = "10-gr-külce-altin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4071),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4072),
                            Name = "20 Gr Külçe Altın",
                            Price = 56000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 20 Gr Külçe Altın.",
                            Url = "20-gr-külce-altin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4077),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4078),
                            Name = "50 Gr Külçe Altın",
                            Price = 140000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 50 Gr Külçe Altın.",
                            Url = "50-gr-külce-altin"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4082),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4083),
                            Name = "100 Gr Külçe Altın",
                            Price = 280000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 100 Gr Külçe Altın.",
                            Url = "100-gr-külce-altin"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4085),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4086),
                            Name = "250 Gr Külçe Altın",
                            Price = 7000000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 250 Gr Külçe Altın.",
                            Url = "250-gr-külce-altin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4088),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4089),
                            Name = "500 Gr Külçe Altın",
                            Price = 1400000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "500-gr-külce-altin"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4092),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4105),
                            Name = "1000 Gr Külçe Altın",
                            Price = 2800000m,
                            Properties = "24 Ayar 995.0 Saflıkta, 500 Gr Külçe Altın.",
                            Url = "1000-gr-külce-altin"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4128),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4129),
                            Name = "Çeyrek Altın",
                            Price = 4750m,
                            Properties = "22 Ayar 916.0 Saflıkta, 1.75 Gr Çeyrek Altın.",
                            Url = "ceyrek-altin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4132),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4133),
                            Name = "Yarım",
                            Price = 9500m,
                            Properties = "22 Ayar 916.0 Saflıkta, 3.50 Gr Yarım Altın.",
                            Url = "yarim-altin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4136),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4136),
                            Name = "Tam Altın",
                            Price = 19000m,
                            Properties = "22 Ayar 916.0 Saflıkta, 7 Gr Tam Altın.",
                            Url = "tam-altin"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4139),
                            ImageUrl = "12.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4139),
                            Name = "100gr Külçe Gümüş",
                            Price = 3850m,
                            Properties = "999.0 Saflıkta, 100 Gr Külçe Gümüş.",
                            Url = "100gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4142),
                            ImageUrl = "13.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4143),
                            Name = "250gr Külçe Gümüş",
                            Price = 8750m,
                            Properties = "999.0 Saflıkta, 250 Gr Külçe Gümüş.",
                            Url = "250gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4145),
                            ImageUrl = "14.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4146),
                            Name = "500gr Külçe Gümüş",
                            Price = 17500m,
                            Properties = "999.0 Saflıkta, 500 Gr Külçe Gümüş.",
                            Url = "500gr-külce-gümüs"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4150),
                            ImageUrl = "15.png",
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 15, 16, 12, 37, 326, DateTimeKind.Local).AddTicks(4151),
                            Name = "1000gr Külçe Gümüş",
                            Price = 34000m,
                            Properties = "999.0 Saflıkta, 1000 Gr Külçe Gümüş.",
                            Url = "1000gr-külce-gümüs"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 323, DateTimeKind.Local).AddTicks(6850),
                            UserId = "ddf64ab8-e830-42c1-a048-4b3d33afaae3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 323, DateTimeKind.Local).AddTicks(6879),
                            UserId = "e4e3921b-4696-441c-8c13-b25d93cfb032"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 323, DateTimeKind.Local).AddTicks(6883),
                            UserId = "b0279cd1-7ddb-4ce0-acc2-4ec4db9c317d"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 12, 37, 323, DateTimeKind.Local).AddTicks(6885),
                            UserId = "1c10e730-1401-48cb-8146-5a06943c6ca4"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4e7c8bd-9fe2-49ca-a5aa-d285da379844",
                            Description = "Süper yönetiki haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "4ea9ddb3-2d04-4fba-bb1e-8f1126670ff7",
                            Description = "Yönetiki haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b0bdfef0-fd00-4f68-a44a-4c3afb5a7ea8",
                            Description = "Müşteri haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddf64ab8-e830-42c1-a048-4b3d33afaae3",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "a2e8636e-399f-4ca1-92f9-6bc3f04ab5dc",
                            DateOfBirth = new DateTime(1945, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mslmhanerol@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Müslüm Han",
                            Gender = "Erkek",
                            LastName = "Erol",
                            LockoutEnabled = false,
                            NormalizedEmail = "MSLMHANEROL@GMAIL.COM",
                            NormalizedUserName = "MUSLUMHANEROL",
                            PasswordHash = "AQAAAAIAAYagAAAAEDm7Cryr5jdBM2OkWcIguWdp0RDTChdnzsuNMKILbY2Wb3S0qYH/zOd3SxwmnmNONA==",
                            PhoneNumber = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "902c6265-f78b-4d57-9dab-f629bacab736",
                            TwoFactorEnabled = false,
                            UserName = "muslumhanerol"
                        },
                        new
                        {
                            Id = "e4e3921b-4696-441c-8c13-b25d93cfb032",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "af729af5-6fde-49fb-97c3-cd17e4948e6e",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "enginniyazi@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin",
                            Gender = "Erkek",
                            LastName = "Niyazi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINNIYAZI@GMAIL.COM",
                            NormalizedUserName = "ENGINNIYAZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBO052SmoAtO3r9F0Oq0OmahOhYSVgGB2o8vj4IY9Eoe3jkzcwbhRuB7/6BZhNqmg==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7daf650b-6478-4681-b566-891eeba5b0fb",
                            TwoFactorEnabled = false,
                            UserName = "enginniyazi"
                        },
                        new
                        {
                            Id = "b0279cd1-7ddb-4ce0-acc2-4ec4db9c317d",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "1f89f2f5-dc25-40e3-be2f-9231ca5935cf",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemaldurukan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            LastName = "Durukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALDURUKAN@GMAIL.COM",
                            NormalizedUserName = "KEMALDURUKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPIT6mjcBt5xDLQo5VRiTf207i6ipLjK0C4+TjxoN/B3XaT1cA3TF+qh/D0NpqRqQQ==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "705d33b0-c3e3-41bd-a1dd-3b22fc0e7974",
                            TwoFactorEnabled = false,
                            UserName = "kemaldurukan"
                        },
                        new
                        {
                            Id = "1c10e730-1401-48cb-8146-5a06943c6ca4",
                            AccessFailedCount = 0,
                            Address = "Gaziantep Caddesi Gaziantep Sokak No:27 D:27 Türkiye",
                            City = "Gaziantep",
                            ConcurrencyStamp = "597ffe7b-919c-41f6-af7d-4f8fc8b5da1d",
                            DateOfBirth = new DateTime(1965, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aysenumay@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşen Umay",
                            Gender = "Kadın",
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSENUMAY@GMAIL.COM",
                            NormalizedUserName = "AYSENUMAY",
                            PasswordHash = "AQAAAAIAAYagAAAAENqhST694kGZBvc9xQVDLwcuK/jli75U9Dn5sej2R5n+xQO1Z+jGW0KzGOM9R0Waog==",
                            PhoneNumber = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbc9cdd0-0d0d-4eec-8122-16cec7191973",
                            TwoFactorEnabled = false,
                            UserName = "aysenumay"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddf64ab8-e830-42c1-a048-4b3d33afaae3",
                            RoleId = "e4e7c8bd-9fe2-49ca-a5aa-d285da379844"
                        },
                        new
                        {
                            UserId = "e4e3921b-4696-441c-8c13-b25d93cfb032",
                            RoleId = "4ea9ddb3-2d04-4fba-bb1e-8f1126670ff7"
                        },
                        new
                        {
                            UserId = "b0279cd1-7ddb-4ce0-acc2-4ec4db9c317d",
                            RoleId = "4ea9ddb3-2d04-4fba-bb1e-8f1126670ff7"
                        },
                        new
                        {
                            UserId = "1c10e730-1401-48cb-8146-5a06943c6ca4",
                            RoleId = "b0bdfef0-fd00-4f68-a44a-4c3afb5a7ea8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.OrderDetail", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCartItem", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DegerliMadenSatis.Entity.Concrete.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("DegerliMadenSatis.Entity.Concrete.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
